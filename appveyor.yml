# This is not a .NET project, so we build SpiceyPy in the install step.
build: off

notifications:
  - provider: Slack
    auth_token:
      secure: BrhBGMR/27/Td7uDKiWlFxCOCivXCKFIOl5s3uJsmhxnxKuicFFbRil2AsfaZVXClyL72OmBi4R3RYtNMFSDWjd36qtAwEjIFrt/4XhG5GY=
    channel: '#appveyor'

#  - provider: GitHubPullRequest
#    auth_token:
#      secure: kBl9BlxvRMr9liHmnBs14A==
#    template: "{{#passed}}:white_check_ ..."

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    # CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\_appveyor\\run_with_env.cmd"
    # JAVA_HOME: C:\\Program Files\\Java\\jdk1.7.0
    MEKA_CLASSPATH: "C:\\projects\\scikit-multilearn\\MEKA\\meka-release-1.9.3-SNAPSHOT\\lib\\"

  matrix:

    # Python 2.7.10 is the latest version and is not pre-installed.

    - PYTHON: "C:\\Python27.14"
      PYTHON_VERSION: "2.7.14"
      PYTHON_ARCH: "32"
      HAS_KERAS: "0"

    - PYTHON: "C:\\Python27.14-x64"
      PYTHON_VERSION: "2.7.14"
      PYTHON_ARCH: "64"
      HAS_KERAS: "0"

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.6.x" # currently 3.4.3
      PYTHON_ARCH: "32"
      HAS_KERAS: "0"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.4.3
      PYTHON_ARCH: "64"
      HAS_KERAS: "1"


install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  - mkdir C:\projects\scikit-multilearn\MEKA\
  - ps: Start-FileDownload 'https://adams.cms.waikato.ac.nz/snapshots/meka/meka-snapshot.zip'
  - 7z x meka-snapshot.zip -oC:\\projects\\scikit-multilearn\\MEKA -y > nul
  - ps: "ls \"C:\\projects\\scikit-multilearn\\MEKA\\\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & _appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "pip install -r requirements\\base.txt"
  - "pip install -r requirements\\meka.txt"
  - ps: If ($env:HAS_KERAS -eq "1")  { & pip install -r requirements\\keras.txt }
  - git clone https://github.com/thunlp/OpenNE C:\projects\OpenNE
  - ps: If ($env:HAS_KERAS -eq "1")  { & pip install -e C:/projects/OpenNE/src }
  - "pip install --upgrade scikit-learn numpy scipy"
  # - "pip install -r requirements\\gpl.txt"
  - "pip install -r requirements\\test.txt"
  - "pip install --upgrade --force-reinstall numpy scipy scikit-learn"

#build_script:
  # Build the compiled extension
  #- "%CMD_IN_ENV% python setup.py build"

test_script:
  # Run the project tests
  - "%CMD_IN_ENV% python -m pytest skmultilearn"

#after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- ps: "ls dist"

#artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
#  - path: dist\*

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
